<?php
/**
 * Wikimedia Foundation
 *
 * LICENSE
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * @license		http://www.gnu.org/copyleft/gpl.html GNU GENERAL PUBLIC LICENSE
 */

/**
 * @see Db_Expression
 */
require_once 'Db/Expression.php';

/**
 * Db_Adapter_Abstract
 */
abstract class Db_Adapter_Abstract
{

	/**
	 * The characterEncoding
	 *
	 * @var string $characterEncoding
	 */
	protected $characterEncoding = 'utf8';

	/**
	 * Database configuration
	 *
	 * @var array	$configuration
	 */
	protected $configuration = array();

	/**
	 * Database connection
	 *
	 * @var object|resource|null
	 */
	protected $connection;

	/**
	 * The data
	 *
	 * @var array $data
	 */
	protected $data = array();

	/**
	 * The is the name of the database for the connection.
	 *
	 * @var string $database
	 */
	protected $database;

	/**
	 * The flags to pass to the database adapter. See PHP manual for adapter.
	 *
	 * @var mixed $flags
	 */
	protected $flags;

	/**
	 * The database host.
	 *
	 * @var string $host
	 */
	protected $host = 'localhost';

	/**
	 * The password for the database connection.
	 *
	 * @var string $password
	 */
	protected $password;

	/**
	 * The default port should be declared by the adapter.
	 *
	 * @var integer $port
	 */
	protected $port;

	/**
	 * The result
	 *
	 * @var mixed $result
	 */
	protected $result;

	/**
	 * The result set
	 *
	 * This is generated by @see Db_Adapter_Abstract::fetchAll
	 *
	 * @var array $resultSet
	 */
	protected $resultSet = array();

	/**
	 * The socket to the database connection.
	 *
	 * @var string $socket
	 */
	protected $socket;

	/**
	 * The username for the database connection.
	 *
	 * @var string $username
	 */
	protected $username;

	/**
	 * The last insert ID
	 *
	 * @var string $lastInsertId
	 */
	protected $lastInsertId = '';

	/**
	 * Constructor
	 *
	 * @param array $parameters The adapter parameters
	 *
	 * $parameters
	 * - database:		The is the name of the database for the connection.
	 * - flags:			The flags to pass to the database adapter. See PHP manual for adapter.
	 * - host:			The database host.			DEFAULT => 'localhost'
	 * - password:		The password for the database connection.
	 * - port:			The port for the database connection. The default port should be declared by the adapter.
	 * - socket:		The socket to the database connection.
	 * - username:		The username for the database connection.
	 *
	 */
	public function __construct( $parameters )
	{
		//Debug::puke($parameters, eval(DUMP) . "\$parameters");
		// Get the parameters
		$database	= isset( $parameters['database'] )	? $parameters['database']	: null;
		$flags		= isset( $parameters['flags'] )		? $parameters['flags']		: null;
		$host		= isset( $parameters['host'] )		? $parameters['host']		: null;
		$password	= isset( $parameters['password'] )	? $parameters['password']	: null;
		$port		= isset( $parameters['port'] )		? $parameters['port']		: null;
		$socket		= isset( $parameters['socket'] )	? $parameters['socket']		: null;
		$username	= isset( $parameters['username'] )	? $parameters['username']	: null;

		if ( isset( $database ) ) {
			$this->setDatabase( $database );
		}
		
		if ( isset( $flags ) ) {
			$this->setFlags( $flags );
		}

		if ( isset( $host ) ) {
			$this->setHost( $host );
		}
		
		if ( isset( $password ) ) {
			$this->setPassword( $password );
		}
		
		if ( isset( $port ) ) {
			$this->setPort( $port );
		}
		
		if ( isset( $socket ) ) {
			$this->setSocket( $socket );
		}
		
		if ( isset( $username ) ) {
			$this->setUsername( $username );
		}
		
		$this->init();
	}

	/**
	 * Initialize the class
	 *
	 * init() is called at the end of the constructor to allow automatic settings for adapters.
	 */
	abstract protected function init();

	////////////////////////////////////////////////////////////////////////////
	//
	// Connection handling
	//
	////////////////////////////////////////////////////////////////////////////
	
	/**
	 * getCharacterEncoding
	 *
	 * @return string Return the character encoding
	 */
	public function getCharacterEncoding()
	{
		return $this->characterEncoding;
	}

	/**
	 * setCharacterEncoding
	 *
	 * @param string $value The character encoding
	 */
	public function setCharacterEncoding( $value )
	{
		$this->characterEncoding = $value;
	}

	/**
	 * Connect
	 *
	 * connect() to the database
	 */
	abstract protected function connect();

	/**
	 * getConnection
	 *
	 * @return object|resource|null @see Db_Adapter_Abstract::$connection
	 */
	public function getConnection()
	{
		$this->connect();
		
		return $this->connection;
	}

	/**
	 * Close connection
	 *
	 * closeConnection() to the database
	 */
	abstract public function closeConnection();

	/**
	 * Check to see if the adapter is connected.
	 *
	 * @return boolean Return true if connected to the database
	 */
	abstract public function isConnected();
	
	/**
	 * getDatabase
	 *
	 * @return string Return the database
	 */
	public function getDatabase()
	{
		return $this->database;
	}

	/**
	 * setDatabase
	 *
	 * @param string $value The database
	 */
	public function setDatabase( $value )
	{
		$this->database = $value;
	}

	/**
	 * Get the error code.
	 *
	 * @return mixed	Returns false if there is no error, otherwise returns the error code.
	 */
	abstract public function getErrorCode();
	
	/**
	 * getFlags
	 *
	 * @return string Return the flags
	 */
	public function getFlags()
	{
		return $this->flags;
	}

	/**
	 * setFlags
	 *
	 * It will be necessary to set this in the adapter.
	 *
	 * @param mixed $value The flags
	 */
	abstract public function setFlags( $value );
	
	/**
	 * getHost
	 *
	 * @return string Return the host
	 */
	public function getHost()
	{
		return $this->host;
	}

	/**
	 * setHost
	 *
	 * @param string $value The host
	 */
	public function setHost( $value )
	{
		$this->host = $value;
	}
	
	/**
	 * getPassword
	 *
	 * @return string Return the password
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * setPassword
	 *
	 * @param string $value The password
	 */
	public function setPassword( $value )
	{
		$this->password = $value;
	}
	
	/**
	 * getPort
	 *
	 * @return integer Return the port
	 */
	public function getPort()
	{
		return $this->port;
	}

	/**
	 * setPort
	 *
	 * @param string $value The port
	 */
	public function setPort( $value )
	{
		$this->port = $value;
	}
	
	/**
	 * getResult
	 *
	 * @return mixed Return the result from a query.
	 */
	public function getResult()
	{
		return $this->result;
	}
	
	/**
	 * getResultSet
	 *
	 * @return array Return the result set from a query.
	 */
	public function getResultSet()
	{
		return $this->resultSet;
	}
	
	/**
	 * resetResultSet
	 *
	 */
	public function resetResultSet()
	{
		$this->resultSet = array();
	}
	
	/**
	 * getSocket
	 *
	 * @return string Return the socket
	 */
	public function getSocket()
	{
		return $this->socket;
	}

	/**
	 * setSocket
	 *
	 * @param string $value The socket
	 */
	public function setSocket( $value )
	{
		$this->socket = $value;
	}
	
	/**
	 * getUsername
	 *
	 * @return string Return the user
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * setUsername
	 *
	 * @param string $value The user
	 */
	public function setUsername( $value )
	{
		$this->username = $value;
	}

	////////////////////////////////////////////////////////////////////////////
	//
	// Query handling
	//
	////////////////////////////////////////////////////////////////////////////

	/**
	 * Returns the number of affected rows from the previous query.
	 *
	 * @return integer
	 */
	abstract public function affectedRows();

	/**
	 * delete
	 */
	public function delete( $table, $key, $id, $options = array())
	{

		// Require table
		if ( empty( $table ) ) {
			$message = '$table cannot be empty.';
			throw new Db_Exception( $message );
		}

		// Require key
		if ( empty( $key ) ) {
			$message = '$key cannot be empty.';
			throw new Db_Exception( $message );
		}

		// Require id
		if ( empty( $id ) ) {
			$message = '$id cannot be empty.';
			throw new Db_Exception( $message );
		}

		$where = '`' . $table . '`.`' . $key . '` = \'' . $this->escape( $id ) . '\'';
		
		$query	= '';
		$query .= 'DELETE FROM `' . $table . '`';
		$query .= ' WHERE ' . $where;

		// @codeCoverageIgnoreStart
		$stopper = isset( $options['stopper'] ) ? $options['stopper'] : false;
		$stopperDisable = isset( $options['stopperDisable'] ) ? $options['stopperDisable'] : false;
		$stopperKill = isset( $options['stopperKill'] ) ? $options['stopperKill'] : false;

		if ($stopperKill) {
			Debug::puke( $query, $stopperKill . ' - ' . eval( DUMP ) . __FUNCTION__ . PN . _ . "\$query" );
		}
		elseif ($stopperDisable) {
			Debug::dump( $query, $stopperDisable . ' - ' . eval( DUMP ) . __FUNCTION__ . PN . _ . "\$query" );
			return;
		}
		elseif ($stopper) {
			Debug::dump( $query, $stopper . ' - ' . eval( DUMP ) . __FUNCTION__ . PN . _ . "\$query" );
		}
		// @codeCoverageIgnoreEnd

		//Debug::puke($query, $stopperKill . ' - ' . eval(DUMP) . __FUNCTION__ . PN . _ . "\$query");
		$this->query( $query );
		
		return true;
	}

	/**
	 * Escape
	 *
	 * escape() values before inserting them into the database
	 *
	 * @param string $value The value to escape with the database adapter.
	 *
	 * @return string
	 */
	abstract public function escape( $value );

	/**
	 * Fetch
	 *
	 * fetch() a row from the query result
	 *
	 * @param array		$options	OPTIONAL
	 *
	 * @return string
	 */
	abstract public function fetch( $options = array() );

	/**
	 * Fetch all
	 *
	 * fetchAll() rows from the query result
	 *
	 * @param array		$options	OPTIONAL
	 *
	 * @return string
	 */
	abstract public function fetchAll( $options = array() );

	/**
	 * Fetch all and save result by a key in the row result.
	 *
	 * This can be used to index the result set by primary key
	 *
	 * fetchAllByKey() rows from the query result
	 *
	 * @param string	$key
	 * @param array		$options	OPTIONAL
	 *
	 * @return string
	 */
	abstract public function fetchAllByKey( $key, $options = array() );

	/**
	 * Get the last inserted id with the adapter method.
	 *
	 * @todo This will need to test if the primary key is using auto increment.
	 */
	abstract public function lastInsertId();

	/**
	 * getLastInsertId
	 *
	 * @return Return the log file
	 */
	public function getLastInsertId()
	{
		return $this->lastInsertId;
	}

	/**
	 * setLastInsertId
	 *
	 * @param string $id The log level
	 */
	public function setLastInsertId( $id )
	{
		$this->lastInsertId = $id;
	}

	/**
	 * Limit a select query
	 *
	 * @param integer	$count
	 * @param integer	$offset OPTIONAL
	 * @return string
	 */
	abstract public function limit( $count, $offset = 0 );

	/**
	 * Query the database server with a query
	 *
	 * @param string	$query
	 * @param array		$options	OPTIONAL
	 * @return mixed|Db_Adapter_Abstract
	 */
	abstract public function query( $query, $options = array() );

	/**
	 * Quote into a single value for a where statement
	 */
	public function quoteInto($statement, $value, $options = array())
	{
		$this->connect();
		
		return str_replace('?', $this->escape($value), $statement); 
	}

	/**
	 * Insert a single record into the database.
	 *
	 * @param string	$table	The table to make an insert
	 * @param array		$data
	 * @param array		$options	This will be passed to @see Db_Adapter_Abstract::query
	 * 
	 * $options:
	 * - $stopper: Set this to eval( DUMP ) so you see where the query was called.
	 *
	 * @return string	Return the last inserted id
	 */
	public function insert( $table, $data, $options = array() ) {

		// Require table
		if ( empty( $table ) ) {
			$message = '$table cannot be empty.';
			throw new Exception( $message );
		}
		
		// $stopper is used for dumping queries and terminating the application. 
		$stopper = isset( $options['stopper'] ) ? $options['stopper']	: false;
		
		$fieldsString = '';
		$dataString = '';
		
		foreach ( $data as $field => $value ) {
			
			$fieldsString .= ' `' . (string) $field . '`,';
			
			if ( $value instanceof Db_Expression ) {
				$dataString .= ' ' . $value->__toString() . ',';
			}
			else {
				$dataString .= " '" . $this->escape( $value ) . "',";
			}
		}
		
		// Remove the last comma
		$fieldsString = strlen( $fieldsString ) ? substr( $fieldsString, 0, -1 ) : '';
		
		// Remove the last comma
		$dataString = strlen( $dataString ) ? substr( $dataString, 0, -1 ) : '';
		
		if ( empty( $fieldsString ) ) {
			$message = 'No fields set for insertion on table: ' . $table;
			throw new Db_Exception( $message );
		}
		
		$query	= '';
		$query .= 'INSERT INTO `' . $table . '`';
		$query .= ' (' . $fieldsString . ')';
		$query .= ' VALUES';
		$query .= ' (' . $dataString . ')';

		// @codeCoverageIgnoreStart
		// Dump the query if stopper is enabled.
		if ( $stopper ) {
			Debug::puke( $query, $stopper . eval( DUMP ) . __FUNCTION__ . PN . _ . "\$query" );
		}
		// @codeCoverageIgnoreEnd
		
		$this->query( $query, $options );
		
		// Parsing the id by primary key has not been developed.
		$id = '';
		
		$this->lastInsertId( $id );
		
		return $this->getLastInsertId();
	}

	/**
	 * Updates records in the database.
	 *
	 * @param string	$table	The table to make an insert
	 * @param array		$data
	 * @param array		$options	This will be passed to @see Db_Adapter_Abstract::query
	 * 
	 * $options:
	 * - $stopper: Set this to eval( DUMP ) so you see where the query was called.
	 * 
	 * @return integer	Returns the count of affected rows
	 */
	public function update( $table, $data, $where, $options = array() ) {

		// Require table
		if ( empty( $table ) ) {
			$message = '$table cannot be empty.';
			throw new Db_Exception( $message );
		}

		// A WHERE statement must be supplied.
		if ( empty( $where ) ) {
			$message = '$where cannot be empty.';
			throw new Db_Exception( $message );
		}
		
		// $stopper is used for dumping queries and terminating the application. 
		$stopper = isset( $options['stopper'] ) ? $options['stopper']	: false;
		
		$set = '';
		
		foreach ( $data as $field => $value ) {
			$set .= ' `' . (string) $field . '` =';
			
			if ( $value instanceof Db_Expression ) {
				$set .= ' ' . $value->__toString() . ',';
			}
			else {
				$set .= " '" . $this->escape( $value ) . "',";
			}
		}
		
		$set = strlen($set) ? substr($set, 0, -1) : '';
		
		if ( empty( $set ) ) {
			$message = 'No fields set for update on table: ' . $table;
			throw new Db_Exception($message);
		}

		$query	= '';
		$query .= 'UPDATE `' . $table . '`';
		$query .= ' SET' . $set;
		$query .= ' WHERE ' . $where;


		// @codeCoverageIgnoreStart
		// Dump the query if stopper is enabled.
		if ( $stopper ) {
			Debug::puke( $query, $stopper . eval( DUMP ) . __FUNCTION__ . PN . _ . "\$query" );
		}
		// @codeCoverageIgnoreEnd

		$this->query($query);
		
		return $this->affectedRows();
	 
	}
}
